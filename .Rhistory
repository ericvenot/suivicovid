leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,title="Nombre de décès")
# calcul du nombre total de deces
deces<-covid %>%
filter(!is.na(codepays)) %>%
group_by(codepays,pays) %>%
summarise(total_deces=sum(deaths)) %>%
arrange(desc(total_deces)) %>%
ungroup() %>%
mutate(covid19=case_when(
total_deces > 0 ~ "1",
TRUE            ~ "0"),
classe_covid=cut(total_deces,
breaks=c(-Inf,0, 50, 500,5000,10000,50000),
include.lowest = FALSE,
right = TRUE,
labels = c("Pas de cas","<50","<500","<5000","<10000",">10000")))
world$classe_covid<-(deces$classe_covid[match(world$iso_a3,deces$codepays)])
# definition de la palette de couleurs
pal <- colorFactor("YlOrRd", domain = deces$classe_covid, na.color = "transparent")
# definition du label qui apparait sur le pays
world$labels <- paste0("<strong> Country: </strong> ",
world$name, "<br/>",
"<strong> Nombre de décès: </strong> ",
world$covid, "<br/>"
) %>%
lapply(htmltools::HTML)
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,title="Nombre de décès")
# definition de la palette de couleurs
mypal <- getpal("YlORd",10)
# definition de la palette de couleurs
library("RColorBrewer")
mypal <- getpal("YlORd",10)
pal <- colorFactor(c("white","yellow","orange","redorange","red","black"), domain = deces$classe_covid, na.color = "transparent")
# definition du label qui apparait sur le pays
world$labels <- paste0("<strong> Country: </strong> ",
world$name, "<br/>",
"<strong> Nombre de décès: </strong> ",
world$covid, "<br/>"
) %>%
lapply(htmltools::HTML)
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,title="Nombre de décès")
pal <- colorFactor(c("white","yellow","orange","orangered","red","black"), domain = deces$classe_covid, na.color = "transparent")
# definition du label qui apparait sur le pays
world$labels <- paste0("<strong> Country: </strong> ",
world$name, "<br/>",
"<strong> Nombre de décès: </strong> ",
world$covid, "<br/>"
) %>%
lapply(htmltools::HTML)
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,title="Nombre de décès")
pal <- colorFactor(c("white","yellow","orange","orangered","red4","black"), domain = deces$classe_covid, na.color = "transparent")
# definition du label qui apparait sur le pays
world$labels <- paste0("<strong> Country: </strong> ",
world$name, "<br/>",
"<strong> Nombre de décès: </strong> ",
world$covid, "<br/>"
) %>%
lapply(htmltools::HTML)
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,title="Nombre de décès")
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,title="Nombre de décès dus au COVID19")
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,title="COVID19: nombre de décès")
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,
title=paste0("COVID19 le",format(Sys.time(), "%d %B %Y"), ": nombre de décès"))
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,
title=paste0("COVID19 \n le ",format(Sys.time(), "%d %B %Y"), ": nombre de décès"))
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,
title=paste0("Nombre de décès du au COVID19 le ",format(Sys.time(), "%d %B %Y")))
# creation de la carte interactive
leaflet(world) %>%
setView(lat=48.721436, lng=2.143060, zoom = 3) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addPopups(lat=48.721436, lng=2.143060, content, options = popupOptions(closeButton = FALSE)) %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 0.7,
fillColor = ~pal(classe_covid), label=~labels,
highlight=highlightOptions(
color="black",
bringToFront=TRUE
)) %>%
addLegend(pal = pal, values = ~classe_covid, opacity = 1.0,
title=paste0("Nombre de décès COVID19 le ",format(Sys.time(), "%d %B %Y")))
source('C:/Users/evenot/Desktop/FormationSHINY/SuiviCOVID/SuiviCOVIDavecShinyEtDocker/suivicovid/R/app_ui.R', echo=TRUE)
## Add modules ----
## Create a module infrastructure in R/
golem::add_module( name = "histogramme")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_module( name = "progression")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
## Add modules ----
## Create a module infrastructure in R/
golem::add_module( name = "apercu")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::add_module( name = "progressionavectout")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
usethis::use_package("leaflet")
golem::add_module( name = "carte")
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Don't forget to close the application first!
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Don't forget to close the application first!
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Don't forget to close the application first!
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
usethis::use_package("rgdal")
# Don't forget to close the application first!
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Don't forget to close the application first!
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# rm(list=ls(all.names = TRUE))
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
